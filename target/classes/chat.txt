//Chat Client JS 
   _messages = [];
   _users = [];
   
    //Helper methods
   messageIdGenerator = (function () {
        var counter = 0;
        var getId = function () {
            return counter++;
        }
        var setCounter = function (value) {
            counter = value;
        }
        return {
            getId:getId,
            setCounterInitialValue:setCounter
        }
    }());
 
    //Init
    socket.on('connect', function () {
        console.log("Connected sucessfully");
    });
 
    // Incoming
    socket.on('send:message', function (message) {
        onReceiveMessage(message);
    });
 
    socket.on('init', function (data) {
        console.log("Init message received ");
       _users = data.users;
    });
 
    
    socket.on('user:join', function (data) {
        var newUser = data.user;
       _messages.push({
            user:'server',
            text:'User ' + newUser.userName + ' has joined.'
        });
        _users.push(newUser);
    });
 
    // add a message to the conversation when a user disconnects or leaves the room
    socket.on('user:left', function (data) {
        var leftuser = data.user;
 
        for (var user in $rootScope.users) {
            if (_users[user].userName === leftuser.userName) {
                _users.splice(user, 1);
               _messages.push({
                    user:'server',
                    text:'User ' + leftuser.userName + ' has left.'
                });
 
                break;
            }
        }
    });
 
    // Outgoing
 
   var sendMessage = function () {
        //Need a module to create and parse the messages
        var msg = new Message(essageIdGenerator.getId(), "normal" .messageText);
        socket.emit('send:message', msg.toJSON());
       _messages.push({
            use .myCurrentname,
            tex .messageText
        });
    };
 
    var onReceiveMessage = function (message) {
       _messages.push(message);
    }
};